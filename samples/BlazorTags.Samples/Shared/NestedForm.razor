<h3>NestedForm</h3>

<div class="mb-3">
    <label for="date">Date</label>
    <StateInputDate ValueExpression="() => _nestedModel.Date"
                    ActionCreator="value => new UpdateDateAction(value)"
                    class="form-control" id="date" />
</div>

<div class="mb-3">
    <label for="color">RGB Choice</label>
    <br />
    <div class="btn-group">
        <StateInputRadioGroup ValueExpression="() => _nestedModel.RgbChoice"
                              ActionCreator="value => new UpdateRgbChoiceAction(value)">
            <StateInputRadio Value="@("Red")" class="btn-check" id="redRadio" />
            <label class="btn btn-outline-primary" for="redRadio">Red</label>

            <StateInputRadio Value="@("Green")" class="btn-check" id="greenRadio" />
            <label class="btn btn-outline-primary" for="greenRadio">Green</label>

            <StateInputRadio Value="@("Blue")" class="btn-check" id="blueRadio" />
            <label class="btn btn-outline-primary" for="blueRadio">Blue</label>
        </StateInputRadioGroup>
    </div>
</div>


<div class="mb-3">
    <label for="stateSelect">State</label>
    <StateInputSelect ValueExpression="() => _nestedModel.Selection"
                      ActionCreator="value => new UpdateSelectionAction(value)"
                      Identifier="stateInput"
                      class="form-control" id="stateSelect">
        <option>Washington</option>
        <option>Idaho</option>
        <option>Montana</option>
    </StateInputSelect>

    @if (!string.IsNullOrEmpty(stateSelectionMessage))
    {
        <small class="form-text text-muted">@stateSelectionMessage</small>
    }
</div>

<div class="mb-3">
    <label for="description">Description</label>
    <StateInputTextArea ValueExpression="() => _nestedModel.Description"
                        ActionCreator="value => new UpdateDescriptionAction(value)"
                        class="form-control" id="description" />
</div>

<div class="mb-3">
    <label for="password">Password</label>
    <StateInputText ValueExpression="() => StateContext.State.Name"
                    ActionCreator="value => new UpdateNameAction(value)"
                    type="password" class="form-control" id="password" />
</div>

<div class="mb-3">
    <label for="ageRange">Age Range</label>
    <br />
    <StateInputText ValueExpression="() => _nestedModel.AgeRange"
                    ActionCreator="value => new UpdateAgeRangeAction(value)"
                    type="range" id="ageRange" min="0" max="100" />
</div>

<div class="mb-3">
    <label for="color">Color</label>
    <br />
    <StateInputText ValueExpression="() => _nestedModel.Color"
                    ActionCreator="value => new UpdateColorAction(value)"
                    type="color" id="color" min="0" max="100" />
</div>


@code {
    [CascadingParameter]
    public IStateContext<Model> StateContext { get; set; }

    [CascadingParameter]
    public IFormContext FormContext { get; set; }

    private NestedModel _nestedModel;

    private string stateSelectionMessage;

    protected override void OnInitialized()
    {
        _nestedModel = StateContext.State.Nested;
        StateContext.StateChanged += (sender, args) => stateSelectionMessage = FormContext.GetValidationMessage("stateInput");

        base.OnInitialized();
    }
}

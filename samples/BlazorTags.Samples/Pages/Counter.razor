@page "/counter"

<StateForm StateContext="stateContext" TState="Model" TReducer="Reducer">
    <div class="container-fluid">
        <div class="row">
            <div class="col-10 offset-1">
                <h1>BlazorTags</h1>

                <pre>
                    @JsonConvert.SerializeObject(stateContext.State, Formatting.Indented)
                </pre>

                <p><label>Field Updates:</label> @stateContext.State.FieldsUpdated</p>

                <div class="mb-3">
                    <label for="name">Name</label>
                    <StateInputText ValueExpression="() => stateContext.State.Name"
                                    ActionCreator="value => new UpdateNameAction(value)"
                                    class="form-control" id="name" />
                </div>

                <div class="mb-3">
                    <label for="age">Age</label>
                    <StateInputNumber ValueExpression="() => stateContext.State.Age"
                                      ActionCreator="value => new UpdateAgeAction(value)"
                                      class="form-control" id="age" />
                    @if (!string.IsNullOrEmpty(ageMessage))
                    {
                        <small class="form-text text-muted">@ageMessage</small>
                    }
                </div>

                <div class="form-check">
                    <label class="form-check-label" for="toggleNestedForm">Toggle Nested Form</label>

                    <StateInputCheckbox ValueExpression="() => stateContext.State.ShowNestedForm"
                                        ActionCreator="value => new ToggleShowNestedFormAction()"
                                        class="form-check-input" id="toggleNestedForm" />
                </div>

                <br /><br />

                @if (stateContext.State.ShowNestedForm)
                {
                    <NestedForm />
                }
            </div>
        </div>
    </div>
    <br /><br />
    <br /><br />
</StateForm>

@code {

    private StateContext<Model, Reducer> stateContext;

    private string ageMessage;

    protected override void OnInitialized()
    {
        var nestedModel = new NestedModel(
            DateTime.Today,
            "Blue",
            "Washington",
            "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam non commodo dolor, sed porta ipsum.",
            "29",
            "#61ACEB"
        );

        var model = new Model(
            "Dan",
            29,
            true,
            0,
            nestedModel
        );

        stateContext = new StateContext<Model, Reducer>(model);

        stateContext.StateChanged += (sender, args) => ageMessage = stateContext.GetValidationMessage(stateContext.State, "Age");

        base.OnInitialized();
    }
}
